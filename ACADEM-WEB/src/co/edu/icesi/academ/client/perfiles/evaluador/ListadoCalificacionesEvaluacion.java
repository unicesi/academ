/**
* Copyright © 2013 Universidad Icesi
* 
* This file is part of ACADEM.
* 
* ACADEM is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* ACADEM is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with ACADEM.  If not, see <http://www.gnu.org/licenses/>.
**/

package co.edu.icesi.academ.client.perfiles.evaluador;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import co.edu.icesi.academ.bo.CalificacionBO;
import co.edu.icesi.academ.bo.EvaluacionBO;
import co.edu.icesi.academ.bo.NivelDeConocimientoBO;
import co.edu.icesi.academ.bo.SubtemaBO;
import co.edu.icesi.academ.bo.TemaBO;
import co.edu.icesi.academ.bo.UsuarioBO;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Table;

public class ListadoCalificacionesEvaluacion extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button buttonGuardar;
	@AutoGenerated
	private Table tablaCalificacionesEvaluacion;
	private static final long serialVersionUID = 1L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ListadoCalificacionesEvaluacion() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// User code
		
		// Define the names and data types of columns.
		this.tablaCalificacionesEvaluacion.addContainerProperty("Numeral", String.class, null);
		this.tablaCalificacionesEvaluacion.setColumnWidth("Numeral", 60);
		this.tablaCalificacionesEvaluacion.addContainerProperty("Nivel de Conocimiento", ComboBox.class, null);
		this.tablaCalificacionesEvaluacion.setColumnWidth("Nivel de Conocimiento", 350);
		this.tablaCalificacionesEvaluacion.addContainerProperty("Tema", String.class, null);
		this.tablaCalificacionesEvaluacion.setColumnWidth("Tema", 300);
		this.tablaCalificacionesEvaluacion.addContainerProperty("Descripción", String.class, null);
		this.tablaCalificacionesEvaluacion.setColumnWidth("Descripción", 800);
		
		// Allow selecting items from the table.
		this.tablaCalificacionesEvaluacion.setSelectable(true);
		
		// Send changes in selection immediately to server.
		this.tablaCalificacionesEvaluacion.setImmediate(true);
		
		this.buttonGuardar.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				guardarCalificaciones();
			}
		});
	}
	
	public void cargarCalificacionesEvaluacion(EvaluacionBO evaluacion, UsuarioBO evaluador, List<TemaBO> temas, List<NivelDeConocimientoBO> nivelesDeConocimiento, List<CalificacionBO> calificacionesPrevias) {
		tablaCalificacionesEvaluacion.removeAllItems();
		
		for (TemaBO tema : temas) {
			CalificacionBO calificacion = new CalificacionBO();
			calificacion.setEvaluacion(evaluacion);
			calificacion.setEvaluador(evaluador.getNombre());
			calificacion.setTema(tema);
			
			ComboBox comboBox = new ComboBox();
			for (NivelDeConocimientoBO nivelDeConocimientoBO : nivelesDeConocimiento) {
				comboBox.addItem(nivelDeConocimientoBO);
			}
			comboBox.setNullSelectionAllowed(false);
			boolean noTieneCalificacion = true;
			for (Iterator<CalificacionBO> iterator = calificacionesPrevias.iterator(); noTieneCalificacion && iterator.hasNext();) {
				CalificacionBO calificacionBO = (CalificacionBO) iterator.next();
				if (tema.equals(calificacionBO.getTema())) {
					noTieneCalificacion = false;
					comboBox.select(calificacionBO.getNivelDeConocimiento());
					calificacion.setNivelDeConocimiento(calificacionBO.getNivelDeConocimiento());
				} 
			} 
			if (noTieneCalificacion) {
				comboBox.select(nivelesDeConocimiento.get(0));
				calificacion.setNivelDeConocimiento(nivelesDeConocimiento.get(0));
			}
			
			String descripcion = "";
			for (SubtemaBO subtema : tema.getSubtemas()) {
				descripcion += subtema.getNombre() +  ". ";
			}
			
			tablaCalificacionesEvaluacion.addItem(new Object[] {tema.getId(), comboBox, tema.getNombre(), descripcion}, calificacion);
		}
	}

	protected void guardarCalificaciones() {
		// TODO Auto-generated method stub
		List<CalificacionBO> calificaciones = new ArrayList<CalificacionBO>();
		for (Object itemId : tablaCalificacionesEvaluacion.getItemIds()) {
			CalificacionBO calificacion = (CalificacionBO) itemId;
			ComboBox comboBox = (ComboBox) tablaCalificacionesEvaluacion.getItem(calificacion).getItemProperty("Nivel de Conocimiento").getValue();
			calificacion.setNivelDeConocimiento((NivelDeConocimientoBO) comboBox.getValue());
			calificaciones.add(calificacion);
		}
		ControladorEvaluador.getInstance().guardarCalificaciones(calificaciones);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// tablaCalificacionesEvaluacion
		tablaCalificacionesEvaluacion = new Table();
		tablaCalificacionesEvaluacion.setImmediate(false);
		tablaCalificacionesEvaluacion.setWidth("100.0%");
		tablaCalificacionesEvaluacion.setHeight("100.0%");
		mainLayout.addComponent(tablaCalificacionesEvaluacion,
				"top:60.0px;right:10.0px;bottom:10.0px;left:10.0px;");
		
		// buttonGuardar
		buttonGuardar = new Button();
		buttonGuardar.setCaption("Guardar");
		buttonGuardar.setImmediate(false);
		buttonGuardar.setWidth("-1px");
		buttonGuardar.setHeight("-1px");
		mainLayout.addComponent(buttonGuardar, "top:20.0px;left:10.0px;");
		
		return mainLayout;
	}

}
