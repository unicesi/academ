/**
* Copyright © 2013 Universidad Icesi
* 
* This file is part of ACADEM.
* 
* ACADEM is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* ACADEM is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with ACADEM.  If not, see <http://www.gnu.org/licenses/>.
**/

package co.edu.icesi.academ.client.perfiles.administrador;

import java.util.Date;
import java.util.List;

import co.edu.icesi.academ.bo.EvaluacionBO;
import co.edu.icesi.academ.bo.ProgramaBO;
import co.edu.icesi.academ.bo.UsuarioBO;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Validator;
import com.vaadin.data.Validator.InvalidValueException;
import com.vaadin.server.AbstractErrorMessage.ContentMode;
import com.vaadin.server.ErrorMessage.ErrorLevel;
import com.vaadin.server.UserError;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.PopupDateField;

public class FormularioCrearEditarEvaluacion extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label labelError;
	@AutoGenerated
	private Button buttonGuardar;
	@AutoGenerated
	private ComboBox comboBoxPropietario;
	@AutoGenerated
	private ComboBox comboBoxPrograma;
	@AutoGenerated
	private Label labelPropietario;
	@AutoGenerated
	private Label labelPrograma;
	@AutoGenerated
	private PopupDateField popupDateFieldFechaFinal;
	@AutoGenerated
	private Label labelFechaFinal;
	@AutoGenerated
	private PopupDateField popupDateFieldFechaInicial;
	@AutoGenerated
	private Label labelFechaInicial;
	private static final long serialVersionUID = 1L;
	private int idEvaluacion;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public FormularioCrearEditarEvaluacion() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// User code
		idEvaluacion = -1;
		
		// Validador de la fecha inicial
		popupDateFieldFechaInicial.setRequiredError("Seleccione una fecha para el inicio de la evaluación.");
		
		// Validador de la fecha final
		popupDateFieldFechaFinal.setRequiredError("Seleccione una fecha para el cierre de la evaluación.");
		popupDateFieldFechaFinal.addValidator(new Validator() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void validate(Object value) throws InvalidValueException {
				Date fechaInicial = popupDateFieldFechaInicial.getValue();
				Date fechaFinal = (Date) value;
				if (fechaInicial.after(fechaFinal)) {
					throw new InvalidValueException("La fecha final debe ser mayor a la fecha inicial.");
				}
			}
		});
		
		comboBoxPrograma.setNullSelectionAllowed(false);
		comboBoxPrograma.setImmediate(true);
		// Validador del programa
		comboBoxPrograma.setRequiredError("Seleccione el programa asociado a la evaluación");
		
		comboBoxPropietario.setNullSelectionAllowed(false);
		comboBoxPropietario.setImmediate(true);
		// Validador del propietario
		comboBoxPropietario.setRequiredError("Seleccione el propietario de la evaluación");
		
		buttonGuardar.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				guardarEvaluacion();
			}
		});
		
		this.labelError.setValue("");
		this.labelError.setEnabled(false);
	}

	public void cargarProgramas(List<ProgramaBO> programas) {
		comboBoxPrograma.removeAllItems();
		
		for (ProgramaBO programaBO : programas) {
			comboBoxPrograma.addItem(programaBO);
		}
	}
	
	public void cargarUsuarios(List<UsuarioBO> usuarios) {
		comboBoxPropietario.removeAllItems();
		
		for (UsuarioBO usuarioBO : usuarios) {
			comboBoxPropietario.addItem(usuarioBO);
		}
	}

	public void cargarEvaluacion(EvaluacionBO evaluacion) {
		idEvaluacion = evaluacion.getId();
		popupDateFieldFechaInicial.setValue(evaluacion.getFechaInicial());
		popupDateFieldFechaFinal.setValue(evaluacion.getFechaFinal());
		comboBoxPrograma.select(evaluacion.getPrograma());
		comboBoxPropietario.select(evaluacion.getPropietario());
	}

	protected void guardarEvaluacion() {
		try {
			// Validar campos del formulario
			validarCampos();
			
			// Obtener información de la evaluación de los campos del formulario
			Date fechaInicial = popupDateFieldFechaInicial.getValue();
			Date fechaFinal = popupDateFieldFechaFinal.getValue();
			ProgramaBO programa = (ProgramaBO) comboBoxPrograma.getValue();
			UsuarioBO usuario = (UsuarioBO) comboBoxPropietario.getValue();
			
			// Crear evaluación
			EvaluacionBO evaluacion = new EvaluacionBO();
			evaluacion.setFechaInicial(fechaInicial);
			evaluacion.setFechaFinal(fechaFinal);
			evaluacion.setPrograma(programa);
			evaluacion.setPropietario(usuario);
			
			if (idEvaluacion == -1) {
				ControladorAdministrador.getInstance().crearEvaluacion(evaluacion);
			} else {
				evaluacion.setId(idEvaluacion);
				ControladorAdministrador.getInstance().editarEvaluacion(evaluacion);
			}
		} catch (Exception e) {
			
		}
	}
	
	private void validarCampos() throws Exception {
		try {
			popupDateFieldFechaInicial.validate();
		} catch (InvalidValueException e) {
			mostrarErrorValidacion(popupDateFieldFechaInicial, e.getMessage());
			throw e;
		}
		try {
			popupDateFieldFechaFinal.validate();
		} catch (InvalidValueException e) {
			mostrarErrorValidacion(popupDateFieldFechaFinal, e.getMessage());
			throw e;
		}
		try {
			comboBoxPrograma.validate();
		} catch (InvalidValueException e) {
			mostrarErrorValidacion(comboBoxPrograma, e.getMessage());
			throw e;
		}
		try {
			comboBoxPropietario.validate();
		} catch (InvalidValueException e) {
			mostrarErrorValidacion(comboBoxPropietario, e.getMessage());
			throw e;
		}
	}

	private void mostrarErrorValidacion(AbstractComponent componente, String mensaje) {
		Notification.show("Error de validación", mensaje, Type.TRAY_NOTIFICATION);
		this.labelError.setValue(mensaje);
	}

	public void setMensajeError(String mensaje) {
		Notification.show("ACaDeM", mensaje, Type.TRAY_NOTIFICATION);
		this.labelError.setValue(mensaje);
		buttonGuardar.setComponentError(new UserError(mensaje, ContentMode.TEXT, ErrorLevel.WARNING));
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("320px");
		mainLayout.setHeight("260px");
		
		// top-level component properties
		setWidth("320px");
		setHeight("260px");
		
		// labelFechaInicial
		labelFechaInicial = new Label();
		labelFechaInicial.setImmediate(false);
		labelFechaInicial.setWidth("-1px");
		labelFechaInicial.setHeight("-1px");
		labelFechaInicial.setValue("Fecha Inicial:");
		mainLayout.addComponent(labelFechaInicial, "top:20.0px;left:20.0px;");
		
		// popupDateFieldFechaInicial
		popupDateFieldFechaInicial = new PopupDateField();
		popupDateFieldFechaInicial.setImmediate(false);
		popupDateFieldFechaInicial.setWidth("-1px");
		popupDateFieldFechaInicial.setHeight("-1px");
		popupDateFieldFechaInicial.setRequired(true);
		mainLayout.addComponent(popupDateFieldFechaInicial,
				"top:20.0px;left:120.0px;");
		
		// labelFechaFinal
		labelFechaFinal = new Label();
		labelFechaFinal.setImmediate(false);
		labelFechaFinal.setWidth("-1px");
		labelFechaFinal.setHeight("-1px");
		labelFechaFinal.setValue("FechaFinal:");
		mainLayout.addComponent(labelFechaFinal, "top:60.0px;left:20.0px;");
		
		// popupDateFieldFechaFinal
		popupDateFieldFechaFinal = new PopupDateField();
		popupDateFieldFechaFinal.setImmediate(false);
		popupDateFieldFechaFinal.setWidth("-1px");
		popupDateFieldFechaFinal.setHeight("-1px");
		popupDateFieldFechaFinal.setRequired(true);
		mainLayout.addComponent(popupDateFieldFechaFinal,
				"top:60.0px;left:120.0px;");
		
		// labelPrograma
		labelPrograma = new Label();
		labelPrograma.setImmediate(false);
		labelPrograma.setWidth("-1px");
		labelPrograma.setHeight("-1px");
		labelPrograma.setValue("Programa:");
		mainLayout.addComponent(labelPrograma, "top:100.0px;left:20.0px;");
		
		// labelPropietario
		labelPropietario = new Label();
		labelPropietario.setImmediate(false);
		labelPropietario.setWidth("-1px");
		labelPropietario.setHeight("-1px");
		labelPropietario.setValue("Propietario:");
		mainLayout.addComponent(labelPropietario, "top:140.0px;left:20.0px;");
		
		// comboBoxPrograma
		comboBoxPrograma = new ComboBox();
		comboBoxPrograma.setImmediate(false);
		comboBoxPrograma.setWidth("175px");
		comboBoxPrograma.setHeight("-1px");
		comboBoxPrograma.setRequired(true);
		mainLayout.addComponent(comboBoxPrograma, "top:100.0px;left:120.0px;");
		
		// comboBoxPropietario
		comboBoxPropietario = new ComboBox();
		comboBoxPropietario.setImmediate(false);
		comboBoxPropietario.setWidth("175px");
		comboBoxPropietario.setHeight("-1px");
		comboBoxPropietario.setRequired(true);
		mainLayout.addComponent(comboBoxPropietario,
				"top:140.0px;left:120.0px;");
		
		// buttonCrearEditarEvaluacion
		buttonGuardar = new Button();
		buttonGuardar.setCaption("Guardar");
		buttonGuardar.setImmediate(true);
		buttonGuardar.setWidth("-1px");
		buttonGuardar.setHeight("-1px");
		mainLayout.addComponent(buttonGuardar,
				"top:180.0px;left:222.0px;");
		
		// labelError
		labelError = new Label();
		labelError.setImmediate(false);
		labelError.setWidth("-1px");
		labelError.setHeight("-1px");
		labelError.setValue("Label");
		mainLayout.addComponent(labelError, "top:220.0px;left:20.0px;");
		
		return mainLayout;
	}

}
