package co.edu.icesi.academ.client.perfiles.propietario;

import java.util.ArrayList;
import java.util.List;

import co.edu.icesi.academ.bo.UsuarioBO;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Table;

public class ListadoEvaluadores extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button buttonGuardar;
	@AutoGenerated
	private Button buttonRemoverTodos;
	@AutoGenerated
	private Button buttonAgregarTodos;
	@AutoGenerated
	private Button buttonRemover;
	@AutoGenerated
	private Button buttonAgregar;
	@AutoGenerated
	private Table tableEvaluadores;
	@AutoGenerated
	private Table tableUsuariosDisponibles;
	private static final long serialVersionUID = 1L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ListadoEvaluadores() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		// User code

		tableUsuariosDisponibles.setImmediate(true);
		tableUsuariosDisponibles.setSelectable(true);
		tableUsuariosDisponibles.addContainerProperty("Usuario", String.class,  null);
		
		tableEvaluadores.setImmediate(true);
		tableEvaluadores.setSelectable(true);
		tableEvaluadores.addContainerProperty("Usuario", String.class,  null);
		
		buttonAgregar.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				UsuarioBO usuario = (UsuarioBO) tableUsuariosDisponibles.getValue();
				tableUsuariosDisponibles.removeItem(usuario);
				tableEvaluadores.addItem(new Object[] { usuario.getNombre() }, usuario);
			}
		});
		
		buttonAgregarTodos.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				for (Object itemId : tableUsuariosDisponibles.getItemIds()) {
					UsuarioBO usuario = (UsuarioBO) itemId;
					tableUsuariosDisponibles.removeItem(usuario);
					tableEvaluadores.addItem(new Object[] { usuario.getNombre() }, usuario);
				}
			}
		});
		
		buttonRemover.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				UsuarioBO evaluador = (UsuarioBO) tableEvaluadores.getValue();
				tableEvaluadores.removeItem(evaluador);
				tableUsuariosDisponibles.addItem(new Object[] { evaluador.getNombre() }, evaluador);
			}
		});
		
		buttonRemoverTodos.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				for (Object itemId : tableEvaluadores.getItemIds()) {
					UsuarioBO evaluador = (UsuarioBO) itemId;
					tableEvaluadores.removeItem(evaluador);
					tableUsuariosDisponibles.addItem(new Object[] { evaluador.getNombre() }, evaluador);
				}
			}
		});
		
		buttonGuardar.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				guardarEvaluadores();
			}
		});
	}
	
	public void cargarUsuariosDisponibles(List<UsuarioBO> usuarios){
		tableUsuariosDisponibles.removeAllItems();
		
		for (UsuarioBO usuarioBO : usuarios) {
			tableUsuariosDisponibles.addItem(new Object[] { usuarioBO.getNombre() }, usuarioBO);
		}
	}

	public void cargarEvaluadores(List<UsuarioBO> evaluadores){
		tableEvaluadores.removeAllItems();
		
		for (UsuarioBO usuarioBO : evaluadores) {
			tableEvaluadores.addItem(new Object[] { usuarioBO.getNombre() }, usuarioBO);
		}
	}
	
	protected void guardarEvaluadores() {
		List<UsuarioBO> evaluadores = new ArrayList<UsuarioBO>();
		for (Object itemId : tableEvaluadores.getItemIds()) {
			UsuarioBO evaluador = (UsuarioBO) itemId;
			evaluadores.add(evaluador);
		}
		ControladorPropietario.getInstance().guardarEvaluadores(evaluadores);
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// tableUsuariosDisponibles
		tableUsuariosDisponibles = new Table();
		tableUsuariosDisponibles.setCaption("Available Users");
		tableUsuariosDisponibles.setImmediate(false);
		tableUsuariosDisponibles.setWidth("180px");
		tableUsuariosDisponibles.setHeight("257px");
		mainLayout.addComponent(tableUsuariosDisponibles,
				"top:37.0px;left:20.0px;");
		
		// tableEvaluadores
		tableEvaluadores = new Table();
		tableEvaluadores.setCaption("Stakeholders");
		tableEvaluadores.setImmediate(false);
		tableEvaluadores.setWidth("180px");
		tableEvaluadores.setHeight("257px");
		mainLayout.addComponent(tableEvaluadores, "top:37.0px;left:281.0px;");
		
		// buttonAgregar
		buttonAgregar = new Button();
		buttonAgregar.setCaption(">");
		buttonAgregar.setImmediate(true);
		buttonAgregar.setWidth("45px");
		buttonAgregar.setHeight("-1px");
		mainLayout.addComponent(buttonAgregar, "top:80.0px;left:220.0px;");
		
		// buttonRemover
		buttonRemover = new Button();
		buttonRemover.setCaption("<");
		buttonRemover.setImmediate(true);
		buttonRemover.setWidth("45px");
		buttonRemover.setHeight("-1px");
		mainLayout.addComponent(buttonRemover, "top:160.0px;left:220.0px;");
		
		// buttonAgregarTodos
		buttonAgregarTodos = new Button();
		buttonAgregarTodos.setCaption(">>");
		buttonAgregarTodos.setImmediate(true);
		buttonAgregarTodos.setWidth("45px");
		buttonAgregarTodos.setHeight("-1px");
		mainLayout
				.addComponent(buttonAgregarTodos, "top:120.0px;left:220.0px;");
		
		// buttonRemoverTodos
		buttonRemoverTodos = new Button();
		buttonRemoverTodos.setCaption("<<");
		buttonRemoverTodos.setImmediate(true);
		buttonRemoverTodos.setWidth("45px");
		buttonRemoverTodos.setHeight("-1px");
		mainLayout
				.addComponent(buttonRemoverTodos, "top:200.0px;left:220.0px;");
		
		// buttonGuardar
		buttonGuardar = new Button();
		buttonGuardar.setCaption("Save");
		buttonGuardar.setImmediate(true);
		buttonGuardar.setWidth("-1px");
		buttonGuardar.setHeight("-1px");
		mainLayout.addComponent(buttonGuardar, "top:320.0px;left:388.0px;");
		
		return mainLayout;
	}
}
